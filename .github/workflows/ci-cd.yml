name: 🧪 Tests Pipeline - Unit & E2E Only

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

# Variables d'environnement
env:
  NODE_VERSION: "18.x"
  FRONTEND_PORT: 3000
  BACKEND_PORT: 3001

jobs:
  # ==========================================
  # JOB 1: TESTS UNITAIRES API
  # ==========================================
  unit-tests:
    name: 🧪 Tests Unitaires API
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install Dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: 🧪 Run Unit Tests
        run: |
          cd server && npm run test:unit

      - name: 📊 Generate Test Coverage
        run: |
          cd server && npm run test:coverage

      - name: 📈 Upload Coverage Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-coverage
          path: server/coverage/

      - name: 📋 Display Test Results
        if: always()
        run: |
          echo "## 🧪 Unit Tests Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ Tests unitaires de l'API exécutés" >> $GITHUB_STEP_SUMMARY

  # ==========================================
  # JOB 2: BUILD & SERVICES (pour E2E)
  # ==========================================
  build-services:
    name: 🏗️ Build Services for E2E
    runs-on: ubuntu-latest
    needs: unit-tests

    outputs:
      services-ready: ${{ steps.health-check.outputs.services-status }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install Dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: 🏗️ Build Applications
        run: npm run build

      - name: 🚀 Start Backend Server
        run: |
          cd server && npm start &
          echo $! > backend.pid
          sleep 15

      - name: 🚀 Start Frontend Server
        run: |
          npm run start:next &
          echo $! > frontend.pid
          sleep 20

      - name: 🏥 Health Check Services
        id: health-check
        run: |
          # Test Backend API
          backend_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${{ env.BACKEND_PORT }}/health || echo "000")

          # Test Frontend
          frontend_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${{ env.FRONTEND_PORT }} || echo "000")

          if [ "$backend_status" = "200" ] && [ "$frontend_status" = "200" ]; then
            echo "services-status=ready" >> $GITHUB_OUTPUT
            echo "✅ Services démarrés avec succès"
          else
            echo "services-status=failed" >> $GITHUB_OUTPUT
            echo "❌ Échec démarrage services"
            exit 1
          fi

      - name: 🧪 Quick API Test
        run: |
          # Test CRUD de base
          curl -f http://localhost:${{ env.BACKEND_PORT }}/api/tasks || exit 1

          # Test création tâche
          curl -f -X POST http://localhost:${{ env.BACKEND_PORT }}/api/tasks \
            -H "Content-Type: application/json" \
            -d '{"title":"Test CI","completed":false}' || exit 1

      - name: 🛑 Cleanup
        if: always()
        run: |
          if [ -f backend.pid ]; then kill $(cat backend.pid) 2>/dev/null || true; fi
          if [ -f frontend.pid ]; then kill $(cat frontend.pid) 2>/dev/null || true; fi

  # ==========================================
  # JOB 3: TESTS END-TO-END
  # ==========================================
  e2e-tests:
    name: 🎭 Tests E2E - ${{ matrix.test-suite }}
    runs-on: ubuntu-latest
    needs: build-services
    if: needs.build-services.outputs.services-ready == 'ready'

    strategy:
      fail-fast: false
      matrix:
        test-suite:
          - task-creation
          - task-reading
          - task-update
          - task-deletion
          - user-workflows
          - error-handling
          - crud-operations

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install Dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: 🏗️ Build Applications
        run: npm run build

      - name: 🎭 Run Cypress E2E Tests
        uses: cypress-io/github-action@v6
        with:
          start: |
            cd server && npm start
            npm run start:next
          wait-on: |
            http://localhost:${{ env.BACKEND_PORT }}/health
            http://localhost:${{ env.FRONTEND_PORT }}
          wait-on-timeout: 180
          browser: chrome
          headless: true
          spec: cypress/e2e/todo/${{ matrix.test-suite }}.cy.ts
          config: |
            {
              "baseUrl": "http://localhost:${{ env.FRONTEND_PORT }}",
              "env": {
                "API_URL": "http://localhost:${{ env.BACKEND_PORT }}/api"
              },
              "video": true,
              "screenshotOnRunFailure": true
            }

      - name: 📊 Upload Test Artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-failure-${{ matrix.test-suite }}
          path: |
            cypress/screenshots
            cypress/videos

      - name: 📋 Test Results Summary
        if: always()
        run: |
          echo "## 🎭 E2E Tests - ${{ matrix.test-suite }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Tests E2E réussis pour ${{ matrix.test-suite }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Tests E2E échoués pour ${{ matrix.test-suite }}" >> $GITHUB_STEP_SUMMARY
          fi

  # ==========================================
  # JOB 4: RAPPORT FINAL SIMPLIFIÉ
  # ==========================================
  test-report:
    name: 📋 Tests Summary Report
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    if: always()

    steps:
      - name: 📊 Generate Tests Report
        run: |
          echo "# 🧪 Tests Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Tests Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Unit Tests API | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎭 E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.unit-tests.result }}" = "success" ] && [ "${{ needs.e2e-tests.result }}" = "success" ]; then
            echo "## ✅ Tous les tests sont passés avec succès !" >> $GITHUB_STEP_SUMMARY
            echo "🎯 Application prête pour évaluation" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Certains tests nécessitent une attention" >> $GITHUB_STEP_SUMMARY
            echo "🔍 Consultez les détails des jobs pour plus d'informations" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🎉 Success Notification
        if: needs.unit-tests.result == 'success' && needs.e2e-tests.result == 'success'
        run: |
          echo "🎉 SUCCESS: Tous les tests unitaires et E2E sont passés !"
          echo "📊 Pipeline de tests optimisé fonctionnel"

      - name: ❌ Failure Notification
        if: needs.unit-tests.result == 'failure' || needs.e2e-tests.result == 'failure'
        run: |
          echo "❌ ATTENTION: Des tests ont échoué"
          echo "🛠️ Vérifiez les logs pour identifier les problèmes"
          exit 1
